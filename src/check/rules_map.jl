rules_map_unknw = "???"
rules_map_ = Dict(
    "TName, TName"        => rules_map_unknw,
    "TTuple, TTuple"      => "Tuple",
    "ASTBase, ASTBase"    => rules_map_unknw,
    "TApp, TWhere"        => "R_Intro",
    "ASTBase, TAny"       => "Top",
    "TName, TWhere"       => "R_Intro",
    "TWhere, ASTBase"     => "L_Intro",
    "ASTBase, TApp"       => rules_map_unknw,
    "TType, TType"        => "Type_Type",
    "TWhere, TWhere"      => "L_Intro | R_Intro",
    "TApp, TName"         => "App_Name",
    "TApp, TAny"          => "App_Super | Any",
    "ASTBase, TWhere"     => "R_Intro",
    "TUnion, ASTBase"     => "Union_Left",
    "TApp, ASTBase"       => "App_Super",
    "ASTBase, TVar"       => "L_Right | R_Right",
    "TVar, ASTBase"       => "L_Left | R_Left",
    "TTuple, TSuperTuple" => "SuperTuple",
    "TName, TUnion"       => "Union_Right",
    "TApp, TUnion"        => "Union_Right",
    "TUnion, TUnion"      => "Union_Left | Union_Right",
    "TVar, TApp"          => "L_Left | R_Left",
    "TName, TType"        => "Type_Right",
    "TApp, TVar"          => "L_Right | R_Right",
    "TType, ASTBase"      => "Type_Left",
    "TType, TWhere"       => "Type_Left",
    "TTuple, ASTBase"     => "Tuple_Lift_Union",
    "TWhere, TApp"        => "L_Intro",
    "TVar, TAny"          => "L_Left | R_Left",
    "TUnion, TAny"        => "Top",
    "TUnion, TApp"        => "Union_Left",
    "TWhere, TUnion"      => "Union_Right | L_Intro",
    "TUnion, TWhere"      => "Union_Left | R_Intro",
    "ASTBase, TUnion"     => "Union_Right",
    "TApp, TType"         => "Type_Right",
    "TType, TAny"         => "Top",
    "ASTBase, TType"      => "Type_Right",
    "TVar, TUnion"        => "Union_Right",
    "TWhere, TAny"        => "Top",
    "TType, TUnion"       => "Union_Right | Type_Left",
    "TUnion, TVar"        => "Union_Left",
    "TType, TVar"         => "Type_Left",
    "TVar, TType"         => "Type_Right",
    "TType, TApp"         => "Type_Left",
    "TVar, TWhere"        => "L_Left | R_Left | R_Intro",
    "TWhere, TVar"        => "L_Right | R_Right | L_Intro",
    "TWhere, TType"       => "Type_Right | L_Intro",
    "TUnion, TType"       => "Type_Right | Union_Left",
    ########################################################
    "Any_Right"           => "Top",
    "TVar, TVar"          => "(TVar, TVar)" * rules_map_unknw,
    "L_R"                 => "L_R",
    "R_Right"             => "R_Right",
    "L_Right"             => "L_Right",
    "R_Left"              => "R_Left",
    "L_Left"              => "L_Left",
    "TApp, TApp"          => "App_Inv",
    "Union_Left"          => "Union_Left",
    "Union_Right"         => "Union_Right",
    "Where_Left"          => "L_Intro",
    "Where_Right"         => "R_Intro",
    "Type_Left"           => "Type_Left",
    "Type_Right"          => "Type_Right",
    ########################################################
    "ASTBase, TUnion-unlift"  => "ASTBase, TUnion-unlift",
    "Union-unlift_Right"      => "Union-unlift_Right",
)

function rules_map(rs :: String)
    rules_map_[rs]
end
