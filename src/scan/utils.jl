import Base.Unicode

# const EOF_CHAR = convert(Char,typemax(UInt32))
const EOF_CHAR = typemax(Char)

is_eof(io::IO) = Base.eof(io)
is_eof(c::Char) = c === EOF_CHAR

is_hex(c::Char) = isdigit(c) || ('a' <= c <= 'f') || ('A' <= c <= 'F')
is_biny(c::Char) = c == '0' || c == '1'
is_octal(c::Char) =  '0' ≤ c ≤ '7'
is_ws(c::Char) = isspace(c)

is_id(c::Char) = is_eof(c) ? false : Base.is_id_char(c)
is_id_start(c::Char) = is_eof(c) ? false : Base.is_id_start_char(c)

read_one(io::IO) = is_eof(io) ? EOF_CHAR : read(io, Char)
take_one(io::IO) = (read_one(io); io)

function peek_one(io::Base.GenericIOBuffer)
    (!io.readable || io.ptr > io.size) && return EOF_CHAR
    c, _ = read_utf(io)
    c
end
function peek_one(io::IOStream)
    x = Ref{Char}()
    ccall(:ios_peekutf8, Int32, (Ptr{Nothing}, Ptr{Char}), io, x) < 0 ? EOF_CHAR : x[]
end

function peek_two(io::IOBuffer)
    (!io.readable || io.ptr > io.size) && return EOF_CHAR, EOF_CHAR
    c1, x = read_utf(io)
    off = x + 1
    io.ptr + off > io.size && return c1, EOF_CHAR
    c2, _ = read_utf(io, off)
    c1, c2
end

const _offset = [0x00000000, 0x00003080, 0x000e2080, 0x03c82080, 0xfa082080, 0x82082080]

function read_utf(io, off=0)
    c = convert(UInt8, io.data[io.ptr + off])
    c < 0x80 && return convert(Char, c), 0
    function trailing(x)
        if x < 193; 0
        elseif x < 225; 1
        elseif x < 241; 2
        elseif x < 249; 3
        elseif x < 253; 4
        else 5
        end
    end
    x::UInt32 = 0
    j = trailing(c + 1)
    for i = 1:j
        x += c
        x <<= 6
        c = convert(UInt8, io.data[io.ptr + i + off])
    end
    x += c
    x -= _offset[j + 1]
    return convert(Char, x), j
end

function is_doted(c::Char)
    is_eof(c) && return false
    x = UInt32(c)
    x == 0x00000021 ||
    x == 0x0000002e ||
    x == 0x0000007e ||
    x == 0x000000ac ||
    x == 0x000000b1 ||
    x == 0x000000d7 ||
    x == 0x00002026 ||
    x == 0x0000205d ||
    x == 0x0000214b ||
    0x00002190 <= x <= 0x00002194 ||
    0x0000219a <= x <= 0x0000219b ||
    x == 0x000021a0 ||
    x == 0x000021a3 ||
    x == 0x000021a6 ||
    x == 0x000021ae ||
    0x000021ce <= x <= 0x000021cf ||
    x == 0x000021d2 ||
    x == 0x000021d4 ||
    0x000021f4 <= x <= 0x000021ff ||
    0x00002208 <= x <= 0x0000220d ||
    0x00002213 <= x <= 0x00002214 ||
    0x00002217 <= x <= 0x00002219 ||
    0x0000221a <= x <= 0x0000221d ||
    0x00002224 <= x <= 0x0000222a ||
    0x00002237 <= x <= 0x00002238 ||
    0x0000223a <= x <= 0x0000223b ||
    0x0000223d <= x <= 0x0000223e ||
    0x00002240 <= x <= 0x0000228b ||
    0x0000228d <= x <= 0x0000229c ||
    0x0000229e <= x <= 0x000022a3 ||
    x == 0x000022a9 ||
    x == 0x000022ac ||
    x == 0x000022ae ||
    0x000022b0 <= x <= 0x000022b7 ||
    0x000022bc <= x <= 0x000022bd ||
    0x000022c4 <= x <= 0x000022c7 ||
    0x000022c9 <= x <= 0x000022d3 ||
    0x000022d5 <= x <= 0x000022ff ||
    x == 0x000025b7 ||
    x == 0x000027c2 ||
    0x000027c8 <= x <= 0x000027c9 ||
    0x000027d1 <= x <= 0x000027d2 ||
    0x000027d5 <= x <= 0x000027d7 ||
    0x000027f0 <= x <= 0x000027f1 ||
    0x000027f5 <= x <= 0x000027f7 ||
    0x000027f9 <= x <= 0x000027ff ||
    0x00002900 <= x <= 0x00002918 ||
    0x0000291d <= x <= 0x00002920 ||
    0x00002944 <= x <= 0x00002970 ||
    0x000029b7 <= x <= 0x000029b8 ||
    x == 0x000029bc ||
    0x000029be <= x <= 0x000029c1 ||
    x == 0x000029e1 ||
    0x000029e3 <= x <= 0x000029e5 ||
    x == 0x000029f4 ||
    0x000029f6 <= x <= 0x000029f7 ||
    0x000029fa <= x <= 0x000029fb ||
    0x00002a07 <= x <= 0x00002a08 ||
    x == 0x00002a1d ||
    0x00002a22 <= x <= 0x00002a2e ||
    0x00002a30 <= x <= 0x00002a3d ||
    0x00002a40 <= x <= 0x00002a45 ||
    0x00002a4a <= x <= 0x00002a58 ||
    0x00002a5a <= x <= 0x00002a63 ||
    0x00002a66 <= x <= 0x00002a67 ||
    0x00002a6a <= x <= 0x00002ad9 ||
    x == 0x00002adb ||
    0x00002af7 <= x <= 0x00002afa ||
    0x00002b30 <= x <= 0x00002b44 ||
    0x00002b47 <= x <= 0x00002b4c ||
    0x0000ffe9 <= x <= 0x0000ffec
end

function is_doted_two(c::Char, c2::Char)
    is_doted(c) ||
    c == '+' ||
    c == '-' ||
    c == '*' ||
    c == '/' ||
    c == '\\' ||
    c == '^' ||
    c == '<' ||
    c == '>' ||
    c == '&' && c2 === '=' ||
    c == '&' ||
    c == '%' ||
    c == '=' && c2 != '>' ||
    c == '|' && c2 != '|' ||
    c == '!' && c2 == '=' ||
    c == '⊻' ||
    c == '÷' ||
    c == '=' && c2 == '>'
end

function is_op_suff(c::Char)
    is_eof(c) && return false
    x = UInt32(c)
    0x000000b2 <= x <= 0x000000b3 ||
    x == 0x000000b9 ||
    x == 0x000002b0 ||
    0x000002b2 <= x <= 0x000002b3 ||
    0x000002b7 <= x <= 0x000002b8 ||
    0x000002e1 <= x <= 0x000002e3 ||
    x == 0x00000302 ||
    x == 0x00001d2c ||
    x == 0x00001d2e ||
    0x00001d30 <= x <= 0x00001d31 ||
    0x00001d33 <= x <= 0x00001d3a ||
    x == 0x00001d3c ||
    0x00001d3e <= x <= 0x00001d43 ||
    0x00001d47 <= x <= 0x00001d49 ||
    x == 0x00001d4d ||
    0x00001d4f <= x <= 0x00001d50 ||
    x == 0x00001d52 ||
    0x00001d56 <= x <= 0x00001d58 ||
    x == 0x00001d5b ||
    0x00001d5d <= x <= 0x00001d6a ||
    x == 0x00001d9c ||
    x == 0x00001da0 ||
    0x00001da5 <= x <= 0x00001da6 ||
    x == 0x00001dab ||
    x == 0x00001db0 ||
    x == 0x00001db8 ||
    x == 0x00001dbb ||
    x == 0x00001dbf ||
    x == 0x00002009 ||
    0x00002032 <= x <= 0x00002037 ||
    x == 0x00002057 ||
    0x00002070 <= x <= 0x00002071 ||
    0x00002074 <= x <= 0x0000208e ||
    0x00002090 <= x <= 0x00002093 ||
    0x00002095 <= x <= 0x0000209c ||
    0x00002c7c <= x <= 0x00002c7d
end

function is_op_start(c::Char)
    is_eof(c) && return false
    is_op_start(UInt32(c))
end
function is_op_start(u::UInt32)
    u in [0x00000021, 0x00000024, 0x00000025, 0x00000026, 0x00000027, 0x0000002a, 0x0000002b, 0x0000002d, 0x0000002e, 0x0000002f, 0x0000003a, 0x0000003c, 0x0000003d, 0x0000003e, 0x0000003f, 0x0000005c, 0x0000005e, 0x00000069, 0x00000077, 0x0000007c, 0x0000007e, 0x000000ac, 0x000000b1, 0x000000d7, 0x000000f7, 0x00002026, 0x0000205d, 0x0000214b, 0x00002190, 0x00002191, 0x00002192, 0x00002193, 0x00002194, 0x0000219a, 0x0000219b, 0x000021a0, 0x000021a3, 0x000021a6, 0x000021ae, 0x000021ce, 0x000021cf, 0x000021d2, 0x000021d4, 0x000021f4, 0x000021f5, 0x000021f6, 0x000021f7, 0x000021f8, 0x000021f9, 0x000021fa, 0x000021fb, 0x000021fc, 0x000021fd, 0x000021fe, 0x000021ff, 0x00002208, 0x00002209, 0x0000220a, 0x0000220b, 0x0000220c, 0x0000220d, 0x00002213, 0x00002214, 0x00002217, 0x00002218, 0x00002219, 0x0000221a, 0x0000221b, 0x0000221c, 0x0000221d, 0x00002224, 0x00002225, 0x00002226, 0x00002227, 0x00002228, 0x00002229, 0x0000222a, 0x00002237, 0x00002238, 0x0000223a, 0x0000223b, 0x0000223d, 0x0000223e, 0x00002240, 0x00002241, 0x00002242, 0x00002243, 0x00002244, 0x00002245, 0x00002246, 0x00002247, 0x00002248, 0x00002249, 0x0000224a, 0x0000224b, 0x0000224c, 0x0000224d, 0x0000224e, 0x0000224f, 0x00002250, 0x00002251, 0x00002252, 0x00002253, 0x00002254, 0x00002255, 0x00002256, 0x00002257, 0x00002258, 0x00002259, 0x0000225a, 0x0000225b, 0x0000225c, 0x0000225d, 0x0000225e, 0x0000225f, 0x00002260, 0x00002261, 0x00002262, 0x00002263, 0x00002264, 0x00002265, 0x00002266, 0x00002267, 0x00002268, 0x00002269, 0x0000226a, 0x0000226b, 0x0000226c, 0x0000226d, 0x0000226e, 0x0000226f, 0x00002270, 0x00002271, 0x00002272, 0x00002273, 0x00002274, 0x00002275, 0x00002276, 0x00002277, 0x00002278, 0x00002279, 0x0000227a, 0x0000227b, 0x0000227c, 0x0000227d, 0x0000227e, 0x0000227f, 0x00002280, 0x00002281, 0x00002282, 0x00002283, 0x00002284, 0x00002285, 0x00002286, 0x00002287, 0x00002288, 0x00002289, 0x0000228a, 0x0000228b, 0x0000228d, 0x0000228e, 0x0000228f, 0x00002290, 0x00002291, 0x00002292, 0x00002293, 0x00002294, 0x00002295, 0x00002296, 0x00002297, 0x00002298, 0x00002299, 0x0000229a, 0x0000229b, 0x0000229c, 0x0000229e, 0x0000229f, 0x000022a0, 0x000022a1, 0x000022a2, 0x000022a3, 0x000022a9, 0x000022ac, 0x000022ae, 0x000022b0, 0x000022b1, 0x000022b2, 0x000022b3, 0x000022b4, 0x000022b5, 0x000022b6, 0x000022b7, 0x000022bb, 0x000022bc, 0x000022bd, 0x000022c4, 0x000022c5, 0x000022c6, 0x000022c7, 0x000022c9, 0x000022ca, 0x000022cb, 0x000022cc, 0x000022cd, 0x000022ce, 0x000022cf, 0x000022d0, 0x000022d1, 0x000022d2, 0x000022d3, 0x000022d5, 0x000022d6, 0x000022d7, 0x000022d8, 0x000022d9, 0x000022da, 0x000022db, 0x000022dc, 0x000022dd, 0x000022de, 0x000022df, 0x000022e0, 0x000022e1, 0x000022e2, 0x000022e3, 0x000022e4, 0x000022e5, 0x000022e6, 0x000022e7, 0x000022e8, 0x000022e9, 0x000022ea, 0x000022eb, 0x000022ec, 0x000022ed, 0x000022ee, 0x000022ef, 0x000022f0, 0x000022f1, 0x000022f2, 0x000022f3, 0x000022f4, 0x000022f5, 0x000022f6, 0x000022f7, 0x000022f8, 0x000022f9, 0x000022fa, 0x000022fb, 0x000022fc, 0x000022fd, 0x000022fe, 0x000022ff, 0x000025b7, 0x000027c2, 0x000027c8, 0x000027c9, 0x000027d1, 0x000027d2, 0x000027d5, 0x000027d6, 0x000027d7, 0x000027f0, 0x000027f1, 0x000027f5, 0x000027f6, 0x000027f7, 0x000027f9, 0x000027fa, 0x000027fb, 0x000027fc, 0x000027fd, 0x000027fe, 0x000027ff, 0x00002900, 0x00002901, 0x00002902, 0x00002903, 0x00002904, 0x00002905, 0x00002906, 0x00002907, 0x00002908, 0x00002909, 0x0000290a, 0x0000290b, 0x0000290c, 0x0000290d, 0x0000290e, 0x0000290f, 0x00002910, 0x00002911, 0x00002912, 0x00002913, 0x00002914, 0x00002915, 0x00002916, 0x00002917, 0x00002918, 0x0000291d, 0x0000291e, 0x0000291f, 0x00002920, 0x00002944, 0x00002945, 0x00002946, 0x00002947, 0x00002948, 0x00002949, 0x0000294a, 0x0000294b, 0x0000294c, 0x0000294d, 0x0000294e, 0x0000294f, 0x00002950, 0x00002951, 0x00002952, 0x00002953, 0x00002954, 0x00002955, 0x00002956, 0x00002957, 0x00002958, 0x00002959, 0x0000295a, 0x0000295b, 0x0000295c, 0x0000295d, 0x0000295e, 0x0000295f, 0x00002960, 0x00002961, 0x00002962, 0x00002963, 0x00002964, 0x00002965, 0x00002966, 0x00002967, 0x00002968, 0x00002969, 0x0000296a, 0x0000296b, 0x0000296c, 0x0000296d, 0x0000296e, 0x0000296f, 0x00002970, 0x000029b7, 0x000029b8, 0x000029bc, 0x000029be, 0x000029bf, 0x000029c0, 0x000029c1, 0x000029e1, 0x000029e3, 0x000029e4, 0x000029e5, 0x000029f4, 0x000029f6, 0x000029f7, 0x000029fa, 0x000029fb, 0x00002a07, 0x00002a08, 0x00002a1d, 0x00002a22, 0x00002a23, 0x00002a24, 0x00002a25, 0x00002a26, 0x00002a27, 0x00002a28, 0x00002a29, 0x00002a2a, 0x00002a2b, 0x00002a2c, 0x00002a2d, 0x00002a2e, 0x00002a30, 0x00002a31, 0x00002a32, 0x00002a33, 0x00002a34, 0x00002a35, 0x00002a36, 0x00002a37, 0x00002a38, 0x00002a39, 0x00002a3a, 0x00002a3b, 0x00002a3c, 0x00002a3d, 0x00002a40, 0x00002a41, 0x00002a42, 0x00002a43, 0x00002a44, 0x00002a45, 0x00002a4a, 0x00002a4b, 0x00002a4c, 0x00002a4d, 0x00002a4e, 0x00002a4f, 0x00002a50, 0x00002a51, 0x00002a52, 0x00002a53, 0x00002a54, 0x00002a55, 0x00002a56, 0x00002a57, 0x00002a58, 0x00002a5a, 0x00002a5b, 0x00002a5c, 0x00002a5d, 0x00002a5e, 0x00002a5f, 0x00002a60, 0x00002a61, 0x00002a62, 0x00002a63, 0x00002a66, 0x00002a67, 0x00002a6a, 0x00002a6b, 0x00002a6c, 0x00002a6d, 0x00002a6e, 0x00002a6f, 0x00002a70, 0x00002a71, 0x00002a72, 0x00002a73, 0x00002a74, 0x00002a75, 0x00002a76, 0x00002a77, 0x00002a78, 0x00002a79, 0x00002a7a, 0x00002a7b, 0x00002a7c, 0x00002a7d, 0x00002a7e, 0x00002a7f, 0x00002a80, 0x00002a81, 0x00002a82, 0x00002a83, 0x00002a84, 0x00002a85, 0x00002a86, 0x00002a87, 0x00002a88, 0x00002a89, 0x00002a8a, 0x00002a8b, 0x00002a8c, 0x00002a8d, 0x00002a8e, 0x00002a8f, 0x00002a90, 0x00002a91, 0x00002a92, 0x00002a93, 0x00002a94, 0x00002a95, 0x00002a96, 0x00002a97, 0x00002a98, 0x00002a99, 0x00002a9a, 0x00002a9b, 0x00002a9c, 0x00002a9d, 0x00002a9e, 0x00002a9f, 0x00002aa0, 0x00002aa1, 0x00002aa2, 0x00002aa3, 0x00002aa4, 0x00002aa5, 0x00002aa6, 0x00002aa7, 0x00002aa8, 0x00002aa9, 0x00002aaa, 0x00002aab, 0x00002aac, 0x00002aad, 0x00002aae, 0x00002aaf, 0x00002ab0, 0x00002ab1, 0x00002ab2, 0x00002ab3, 0x00002ab4, 0x00002ab5, 0x00002ab6, 0x00002ab7, 0x00002ab8, 0x00002ab9, 0x00002aba, 0x00002abb, 0x00002abc, 0x00002abd, 0x00002abe, 0x00002abf, 0x00002ac0, 0x00002ac1, 0x00002ac2, 0x00002ac3, 0x00002ac4, 0x00002ac5, 0x00002ac6, 0x00002ac7, 0x00002ac8, 0x00002ac9, 0x00002aca, 0x00002acb, 0x00002acc, 0x00002acd, 0x00002ace, 0x00002acf, 0x00002ad0, 0x00002ad1, 0x00002ad2, 0x00002ad3, 0x00002ad4, 0x00002ad5, 0x00002ad6, 0x00002ad7, 0x00002ad8, 0x00002ad9, 0x00002adb, 0x00002af7, 0x00002af8, 0x00002af9, 0x00002afa, 0x00002b30, 0x00002b31, 0x00002b32, 0x00002b33, 0x00002b34, 0x00002b35, 0x00002b36, 0x00002b37, 0x00002b38, 0x00002b39, 0x00002b3a, 0x00002b3b, 0x00002b3c, 0x00002b3d, 0x00002b3e, 0x00002b3f, 0x00002b40, 0x00002b41, 0x00002b42, 0x00002b43, 0x00002b44, 0x00002b47, 0x00002b48, 0x00002b49, 0x00002b4a, 0x00002b4b, 0x00002b4c, 0x0000ffe9, 0x0000ffea, 0x0000ffeb,0x0000ffec]
end

function is_cat_id_start(c::Char, cat::Integer)
    x = UInt32(c)
    (cat == Unicode.UTF8PROC_CATEGORY_LU || cat == Unicode.UTF8PROC_CATEGORY_LL ||
    cat == Unicode.UTF8PROC_CATEGORY_LT || cat == Unicode.UTF8PROC_CATEGORY_LM ||
    cat == Unicode.UTF8PROC_CATEGORY_LO || cat == Unicode.UTF8PROC_CATEGORY_NL ||
    cat == Unicode.UTF8PROC_CATEGORY_SC ||  # allow currency symbols
    cat == Unicode.UTF8PROC_CATEGORY_SO ||  # other symbols
    # math symbol (category Sm) whitelist
    (x >= 0x2140 && x <= 0x2a1c &&
     ((x >= 0x2140 && x <= 0x2144) || # ⅀, ⅁, ⅂, ⅃, ⅄
      x == 0x223f || x == 0x22be || x == 0x22bf || # ∿, ⊾, ⊿
      x == 0x22a4 || x == 0x22a5 || # ⊤ ⊥
      (x >= 0x2202 && x <= 0x2233 &&
       (x == 0x2202 || x == 0x2205 || x == 0x2206 || # ∂, ∅, ∆
        x == 0x2207 || x == 0x220e || x == 0x220f || # ∇, ∎, ∏
        x == 0x2210 || x == 0x2211 || # ∐, ∑
        x == 0x221e || x == 0x221f || # ∞, ∟
        x >= 0x222b)) || # ∫, ∬, ∭, ∮, ∯, ∰, ∱, ∲, ∳
      (x >= 0x22c0 && x <= 0x22c3) ||  # N-ary big ops: ⋀, ⋁, ⋂, ⋃
      (x >= 0x25F8 && x <= 0x25ff) ||  # ◸, ◹, ◺, ◻, ◼, ◽, ◾, ◿
      (x >= 0x266f &&
       (x == 0x266f || x == 0x27d8 || x == 0x27d9 || # ♯, ⟘, ⟙
        (x >= 0x27c0 && x <= 0x27c1) ||  # ⟀, ⟁
        (x >= 0x29b0 && x <= 0x29b4) ||  # ⦰, ⦱, ⦲, ⦳, ⦴
        (x >= 0x2a00 && x <= 0x2a06) ||  # ⨀, ⨁, ⨂, ⨃, ⨄, ⨅, ⨆
        (x >= 0x2a09 && x <= 0x2a16) ||  # ⨉, ⨊, ⨋, ⨌, ⨍, ⨎, ⨏, ⨐, ⨑, ⨒, ⨓, ⨔, ⨕, ⨖
        x == 0x2a1b || x == 0x2a1c)))) || # ⨛, ⨜
    (x >= 0x1d6c1 && # variants of \nabla and \partial
     (x == 0x1d6c1 || x == 0x1d6db ||
      x == 0x1d6fb || x == 0x1d715 ||
      x == 0x1d735 || x == 0x1d74f ||
      x == 0x1d76f || x == 0x1d789 ||
      x == 0x1d7a9 || x == 0x1d7c3)) ||
    # super- and subscript +-=()
    (x >= 0x207a && x <= 0x207e) ||
    (x >= 0x208a && x <= 0x208e) ||
    # angle symbols
    (x >= 0x2220 && x <= 0x2222) || # ∠, ∡, ∢
    (x >= 0x299b && x <= 0x29af) || # ⦛, ⦜, ⦝, ⦞, ⦟, ⦠, ⦡, ⦢, ⦣, ⦤, ⦥,
      # ⦦, ⦧, ⦨, ⦩, ⦪, ⦫, ⦬, ⦭, ⦮, ⦯
    # Other_ID_Start
    x == 0x2118 || x == 0x212E || # ℘, ℮
    (x >= 0x309B && x <= 0x309C)) # katakana-hiragana sound marks
end

